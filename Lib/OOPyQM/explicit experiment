class dof():
	"""
	A degree of freedom to solve for in a explicit methodology.
	Attributes:

	node_id: 	Number that represents the row that corresponds to a certain node in 
				the array of nodes.
	boundary:  Boolean. df: false

	region:  tells to which region it belongs

	vectorial: Tells if the degree of freedom is part of a vectorial formulation.
			   for 2D vectorial models we will have two dof's per node.
	comp:  0,1   If vectorial, this will tell if the dof corresponds to x or y component of the field.	

	s_elements:  List of surrounding elements 

	k: 		Componento of the stiffness matrix built using the elements to which it belongs

	"""
	def __init__(self, node_id, simulation, comp = 0, vectorial = False ):
		self.node_id = node_id
		self.k = 0
		self.region = ''
		self.comp = comp
		self.s_elements = []
		self.boundary = check_if_in_boundary(node_id, simulation)
	def __str__(self):
		return "Degree of freedom %s of node %s is shared by elements [list of elements]"\
		"and its corresondent stiffness constant is %s" % (self.comp, self.node_id, self.s_elements, self.k)		
	def find_surrounding_elements(self, simulation):
		"""
		Loop over elements looking for reference to the current node_id
		"""
		self.k = 0
		self.s_elements = []
		for region in self.simulation.domain.regions:
            all_elements = region.elements
            for el_class in all_elements:
                elements = all_elements[el_class]
                if vectorial:
                    n_elements = elements.n_elements   
                    el_set = elements.el_set
                    if el_set == []:
                        break
                    else:
                        for el in range(n_elements):
                        	if self.node_id in el_set[el]:
                        		self.s_elements.append(region.name+el_class+str(el))
                        		lo_stif = elements.build_local_stiffness(nodes_coords, el)
	                            if simulation.sim_type == 'EM':
	                                mu = region.material_prop['mu']
	                                lo_stif = 1.0/mu * lo_stif
	                            elif simulation.sim_type == 'QM':
	                                h = region.material_prop['h']
	                                m = region.material_prop['m']
	                                lo_stif = h/(2.*m)*lo_stif
	                            else:
	                                raise NotImplementedError('%s Not a simulation type'%simulation.sim_type) 
	                            from numpy import sum, where
	                            row = lo_stif[where(el_set[el] == self.node_id)[0],:]
								column = lo_stif[1:, where(el_set[el] == self.node_id)[1]]
	                            self.k += sum(row) + sum(column)

                else:
                    n_elements = elements.n_elements
                    el_set = elements.el_set
                    if el_set == []:
                        break
                    else:
                        for el in range(n_elements):
                        	if self.node_id in  el_set[el]:
                        		print 'something'
	def check_if_in_boundary(self, node_id, simulation):
		bc_lines = simulation.domain.elements.lines.el_set
		n_lines = simulation.domain.elements.lines.n_elements
		order = simulation.domain.elements.lines.order
        vectorial = simulation.domain.elements.lines.vectorial
        dirichlet = simulation.domain.boundaries.dirichlet
        if vectorial:
            for tag in dirichlet:
                for ln in range(n_lines):
                	if node_id in bc_lines[ln]:
                		print ln
        else:
        	print NotImplementedError("Wait please")




